@model HeaderLinksModel
@inject Nop.Core.IWebHelper webHelper

<div class="header-links">
    <ul>
        <li>
            <a class="ico-search header-search-toggle" aria-controls="store-search-box" aria-expanded="false"></a>
        </li>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksBefore })
        @if (Model.IsAuthenticated)
        {
            <li class="not-mobile"><a href="@Url.RouteUrl("CustomerInfo")" class="ico-account">@T("Account.MyAccount")@*@Model.CustomerName*@</a></li>
            <li class="not-mobile"><a href="@Url.RouteUrl("Logout")" class="ico-logout">@T("Account.Logout")</a></li>
        }
        else
        {
            var returnUrl = Context.Request.Query.TryGetValue("returnUrl", out var url) && !StringValues.IsNullOrEmpty(url)
                ? url.ToString()
                : webHelper.GetRawUrl(Context.Request);

            <li class="not-mobile"><a href="@Url.RouteUrl("Login", new { returnUrl })" class="ico-login">@T("Account.Login")</a></li>
        }
        @if (Model.AllowPrivateMessages)
        {
            <li>
                <a href="@Url.RouteUrl("PrivateMessages", new { tab = "" })" class="ico-inbox">
                    <span class="inbox-label">@T("PrivateMessages.Inbox")</span>
                    <span class="inbox-unread">@Model.UnreadPrivateMessages</span>
                </a>
            </li>
        }
        @*if (Model.WishlistEnabled)
            {
                <li>
                    <a href="@Url.RouteUrl("Wishlist")" class="ico-wishlist">
                        <span class="wishlist-label">@T("Wishlist")</span>
                        <span class="wishlist-qty">@T("Wishlist.HeaderQuantity", Model.WishlistItems)</span>
                    </a>
                </li>
            }*@
        @*if (Model.ShoppingCartEnabled)
            {
                <li id="topcartlink">
                    <a href="@Url.RouteUrl("ShoppingCart")" class="ico-cart">
                        <span class="cart-label">@T("ShoppingCart")</span>
                        <span class="cart-qty">@T("ShoppingCart.HeaderQuantity", Model.ShoppingCartItems)</span>
                    </a>
                </li>
            }*@
    </ul>
</div>

<div class="fix-menu">
    <div class="fix-menu__item">
        <a href="/catalog" class="fix-menu__link fix-menu__link-catalog slide-nav-toggle" aria-controls="slide-nav" aria-expanded="false">
            <span class="fix-menu__title">Каталог</span>
        </a>
    </div>

    <div class="fix-menu__item">
        <a href="/partners" class="fix-menu__link fix-menu__link-charts">
            @* <a href="/compareproducts" class="fix-menu__link fix-menu__link-home"> *@
            <span class="fix-menu__title">Статистика</span>
        </a>
    </div>

    <div class="fix-menu__item only-mobile">
        <a href="/" class="fix-menu__link fix-menu__link-home">
            <span class="fix-menu__title">Главная</span>
        </a>
    </div>

    <div class="fix-menu__item not-mobile">
        <a href="/compareproducts" class="fix-menu__link fix-menu__link-dialer">
            <span class="fix-menu__title">Дилерам</span>
        </a>
    </div>

    <div class="fix-menu__item">
        <a id="fixcartlink" href="@Url.RouteUrl("ShoppingCart")" class="fix-menu__link fix-menu__link-cart">
            <span class="fix-menu__title">Корзина</span>
            <span class="cart-qty">@T("ShoppingCart.HeaderQuantity", Model.ShoppingCartItems)</span>
        </a>
    </div>

    <div class="fix-menu__item only-mobile">
        <a href="@Url.RouteUrl("CustomerInfo")" class="fix-menu__link fix-menu__link-account">
            <span class="fix-menu__title">Профиль</span>
            @* добавить значок уведомлений *@
        </a>
    </div>

    <div class="fix-menu__item not-mobile">
        <a href="@Url.RouteUrl("Wishlist")" class="fix-menu__link fix-menu__link-wishlist">
            <span class="fix-menu__title">Избранное</span>
            <span class="wishlist-qty">@T("Wishlist.HeaderQuantity", Model.WishlistItems)</span>
        </a>
    </div>

</div>


@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksAfter })

@* if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
    {
        //new private message notification
        <script asp-location="Footer">
            $(document).ready(function () {
                displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
            });
        </script>
    } *@
@if (Model.ShoppingCartEnabled)
{
    <script asp-location="Footer">
        $(document).ready(function () {
            $('.fix-menu-wrap').on('mouseenter', '#fixcartlink', function () {
                $('#flyout-cart').addClass('active');
            });
            $('.fix-menu-wrap').on('mouseleave', '#fixcartlink', function () {
                $('#flyout-cart').removeClass('active');
            });
        });
    </script>
}